#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&lt { tapping-term-ms = <150>; };

/ {
    combos {
        compatible = "zmk,combos";

        space_hold {
            bindings = <&kp SPACE>;
            key-positions = <24 37>;
            layers = <0>;
        };

        l_cmd {
            bindings = <&kp LGUI>;
            key-positions = <16 15>;
            require-prior-idle-ms = <50>;
            timeout-ms = <20>;
        };

        l_opt {
            bindings = <&kp LALT>;
            key-positions = <15 14>;
            require-prior-idle-ms = <50>;
            timeout-ms = <20>;
        };

        l_cmd_opt {
            bindings = <&kp LA(LGUI)>;
            key-positions = <14 15 16>;
            require-prior-idle-ms = <50>;
            timeout-ms = <20>;
        };

        r_cmd {
            bindings = <&kp RGUI>;
            key-positions = <19 20>;
            require-prior-idle-ms = <50>;
            timeout-ms = <20>;
        };

        r_opt {
            bindings = <&kp RALT>;
            key-positions = <20 21>;
            require-prior-idle-ms = <50>;
            timeout-ms = <20>;
        };

        r_cmd_opt {
            bindings = <&kp RA(RGUI)>;
            key-positions = <19 20 21>;
            require-prior-idle-ms = <50>;
            timeout-ms = <20>;
        };

        l_boot {
            bindings = <&u_bootloader>;
            key-positions = <36 37>;
            layers = <1>;
        };

        r_boot {
            bindings = <&u_bootloader>;
            key-positions = <41 40>;
            layers = <2>;
        };
    };

    behaviors {
        u_bootloader: u_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "U_BOOTLOADER";
            #binding-cells = <0>;
            bindings = <&none>, <&bootloader>;
        };

        shift_word: shift_word {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_WORD";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "base";
            bindings = <
&kp TAB        &kp Q  &kp W  &kp E     &kp R        &kp T  &kp Y      &kp U      &kp I      &kp O    &kp P     &kp BSPC
&mt LCTRL ESC  &kp A  &kp S  &kp D     &kp F        &kp G  &kp H      &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X  &kp C     &kp V        &kp B  &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                             &kp LGUI  &shift_word  &mo 1  &lt 2 RET  &kp SPACE  &kp RALT
            >;
        };

        num_layer {
            display-name = "num";
            bindings = <
&kp GRAVE      &kp N1     &kp N2    &kp N3    &kp N4      &kp N5     &kp N6     &kp N7    &kp N8     &kp N9    &kp N0    &kp BSPC
&mt LCTRL ESC  &kp EQUAL  &kp LBKT  &kp RBKT  &kp MINUS   &kp UNDER  &kp LBRC   &kp LPAR  &kp COLON  &kp RPAR  &kp RBRC  &kp PIPE
&kp LSHFT      &kp PLUS   &kp AT    &kp HASH  &kp DOLLAR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR   &kp EXCL  &kp BSLH  &kp RSHFT
                                    &trans    &trans      &trans     &trans     &trans    &trans
            >;
        };

        fn_layer {
            display-name = "fn";
            bindings = <
&kp ESC    &none  &none       &none         &none         &none    &kp LS(LG(LBKT))  &none      &none      &kp LS(LG(RBKT))  &none  &kp DEL
&kp LCTRL  &none  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp F15  &kp LEFT          &kp DOWN   &kp UP     &kp RIGHT         &none  &none
&kp LSHFT  &none  &kp C_PREV  &kp C_PP      &kp C_NEXT    &kp F14  &kp HOME          &kp PG_DN  &kp PG_UP  &kp END           &none  &kp RSHFT
                              &trans        &trans        &trans   &trans            &trans     &trans
            >;
        };
    };
};
